package modules

const (
	_ = iota
	// FormatRaw represents an artifact in its pristine format (eg. binary or ar archive)
	FormatRaw
	// FormatGZip represents an artifact in compressed format (eg. the raw format compressed with gzip)
	FormatGZip
	// FormatUPX represents an artifact compressed by UPX (self-uncompressing executable)
	FormatUPX
	// FormatTar represents an artifact put together into a TAR archive. It can be further compressed.
	FormatTar
	// FormatZip represents an artifact put together into a ZIP archive.
	FormatZip
)

type (
	// Results are a cumulative structure carried over to each module,
	// to contain data later steps might require
	Results struct {
		ProjectName string
		TargetDir   string
		Version     string
		Artifacts   []Artifact
	}

	// Artifact is a file generated by the build pipeline, which can
	// be further processed by later steps (eg. a build result put into
	// an archive)
	Artifact struct {
		Filename string
		Format   int
		Name     string
		OS       string
		Arch     string
	}
)

// AddArtifact registers a new artifact in Results
func (res *Results) AddArtifact(format int, name, filename, os, arch string) {
	res.Artifacts = append(res.Artifacts, Artifact{
		Format:   format,
		Name:     name,
		Filename: filename,
		OS:       os,
		Arch:     arch,
	})
}

func (res *Results) ArtifactsByName(name string) []*Artifact {
	artifacts := []*Artifact{}
	for i := range res.Artifacts {
		if res.Artifacts[i].Name == name {
			artifacts = append(artifacts, &res.Artifacts[i])
		}
	}
	return artifacts
}
