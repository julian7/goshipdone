package ctx

import (
	"log"
)

type (
	// Artifacts is a slice of Artifact
	Artifacts []*Artifact

	// Artifact is a file generated by the build pipeline, which can
	// be further processed by later steps (eg. a build result put into
	// an archive)
	Artifact struct {
		*OsArch
		Filename string
		ID       string
		Location string
	}
)

// Add registers a new artifact in Artifacts
func (arts *Artifacts) Add(artifact *Artifact) {
	log.Printf("      storing artifact %s as %s (%s)", artifact.Filename, artifact.ID, artifact.OsArch.String())
	*arts = append(*arts, artifact)
}

// ByID searches artifacts by their build IDs
func (arts *Artifacts) ByID(id string) *Artifacts {
	results := &Artifacts{}

	for i := range *arts {
		if (*arts)[i].ID == id {
			*results = append(*results, (*arts)[i])
		}
	}

	return results
}

// OsArchByIDs maps artifacts by OS-Arch, filtering by IDs
func (arts *Artifacts) OsArchByIDs(ids []string, skips []string) map[string]*Artifacts {
	skipIndex := make(map[string]bool, len(skips))

	for _, skip := range skips {
		skipIndex[skip] = true
	}

	builds := map[string]*Artifacts{}

	for _, id := range ids {
		for _, art := range *arts.ByID(id) {
			osarch := art.OsArch.String()
			if _, ok := skipIndex[osarch]; ok {
				continue
			}

			if _, ok := builds[osarch]; !ok {
				builds[osarch] = &Artifacts{}
			}

			*builds[osarch] = append(*builds[osarch], art)
		}
	}

	return builds
}
